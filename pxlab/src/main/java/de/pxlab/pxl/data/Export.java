package de.pxlab.pxl.data;

import java.io.*;

import de.pxlab.stat.*;
import de.pxlab.util.*;
import de.pxlab.pxl.*;

/**
 * Export a data table to a file.
 * 
 * <p>
 * The raw data table (DataType == RAW_DATA) is the table of all trials which
 * survived the Include and Exclude condition.
 * 
 * <p>
 * If the DataType is FACTORIAL_DATA then a factorial data table is created
 * which contains a single data value for every level of the given factors,
 * including the first, which is the random factor. Repetitions of the same
 * factor level combination for a single level of the random factor are replaced
 * by their arithmetic mean value. Entries are considered to be missing values
 * if the raw data for a certain factor level combination can't be converted
 * into a proper number. These missing values are replaced by the means for the
 * same factor level across all levels of the random factor.
 * 
 * <p>
 * If the DataType is FACTORIAL_FREQUENCY_DATA then the data are the frequencies
 * of each factor level combination contained in the data table. All columns are
 * considered to be factor levels in this case. This means that a new column is
 * added which counts the number of cases for each factor level combination.
 * 
 * <p>
 * The DataType REPEATED_MEASURES_DATA is derived from a factorial data table as
 * generated by FACTORIAL_DATA. This table rearranges the data such that the
 * table is suitable for importing it into commercial statistics packages like
 * SYSTAT or SPSS. These programs require that all data collected for one factor
 * level combination of the random factor and the between factors be contained
 * in a single row of the data table. In most cases the random factor will be
 * the subject such that all data collected from one subject for a single factor
 * level combination of the between factors will be contained in a single row of
 * the table. The data for all levels of every within or repeated measures
 * factor will be written from left to right following the factor levels of the
 * random and the between factors. Suppose we have two independent within
 * factors with 2 levels of the first, and 3 levels of the second. The sequence
 * will be such that the last factor runs fastest. We thus will have the
 * following factor level combinations from left to right: 11, 12, 13, 21, 22,
 * 23. The first column of the output table will be the factor level of the
 * random factor which is the first factor in the factorial data table. Then
 * follow the factor levels of the between factors if these exist. And then we
 * have the repeated measures of all within factors.
 * 
 * @author H. Irtel
 * @version 0.1.1
 */
/*
 * 
 * 2005/12/08
 * 
 * 2006/02/15 set HTMLFormat to 0 by default.
 */
public class Export extends DataDisplay implements StatCodes, ExportCodes {
	/** Flag to enter the column names in the first line of the output file. */
	public ExPar ShowColumnNames = new ExPar(FLAG, new ExParValue(0),
			"Flag to add column names");
	/**
	 * The type of the data file to be exported: Possible values are defined in
	 * class de.pxlab.pxl.ExportCodes.
	 * 
	 * @see de.pxlab.pxl.ExportCodes
	 */
	public ExPar DataType = new ExPar(GEOMETRY_EDITOR, ExportCodes.class,
			new ExParValueConstant("de.pxlab.pxl.ExportCodes.FACTORIAL_DATA"),
			"Type of data table to export");
	/** Flag to write HTML output. */
	public ExPar HTMLFormat = new ExPar(FLAG, new ExParValue(0),
			"Flag to write HTML formatted output");
	/** Flag to write only integer numbers. */
	public ExPar IntegerFormat = new ExPar(FLAG, new ExParValue(0),
			"Flag to write only integer formatted numbers");

	public Export() {
		setTitleAndTopic("Export data table", Topics.DATA);
		Header.set("Data Table");
	}

	protected int processDataTable(ExDesign exDesign, String[] p,
			ExParValueTable grandTable) {
		ExParValueTable table = null;
		if (p != null && p.length != 0) {
			table = new ExParValueTable(grandTable.subTable(p));
		} else {
			table = grandTable;
		}
		String data = null;
		int type = DataType.getInt();
		if (type == RAW_DATA) {
			data = table.toString(ShowColumnNames.getFlag(),
					HTMLFormat.getFlag(), IntegerFormat.getFlag());
		} else if (type == FACTORIAL_DATA || type == REPEATED_MEASURES_DATA
				|| type == CROSS_TABLE_DATA) {
			FactorialExParValueTable ft = new FactorialExParValueTable(table);
			if (type == REPEATED_MEASURES_DATA) {
				DataTable rmt = ft.repeatedMeasuresTable();
				if (ft.hasMissingValues()) {
					System.out.println(getInstanceName()
							+ " found missing values!");
				}
				data = rmt.toString(ShowColumnNames.getFlag(),
						HTMLFormat.getFlag(), IntegerFormat.getFlag());
			} else if (type == CROSS_TABLE_DATA) {
				DataTable rmt = ft.crossTable();
				if (ft.hasMissingValues()) {
					System.out.println(getInstanceName()
							+ " found missing values!");
				}
				data = rmt.toString(ShowColumnNames.getFlag(),
						HTMLFormat.getFlag(), IntegerFormat.getFlag());
			} else {
				if (ft.hasMissingValues()) {
					System.out.println(getInstanceName()
							+ " found missing values!");
				}
				data = ft.toString(ShowColumnNames.getFlag(),
						HTMLFormat.getFlag(), IntegerFormat.getFlag());
			}
		} else if (type == FACTORIAL_FREQUENCY_DATA) {
			FactorialFrequencyTable ft = new FactorialFrequencyTable(
					table.stringTable());
			if (ft.hasMissingValues()) {
				System.out
						.println(getInstanceName() + " found missing values!");
			}
			data = ft.toString(ShowColumnNames.getFlag(), HTMLFormat.getFlag(),
					IntegerFormat.getFlag());
		} else {
			data = table.toString(ShowColumnNames.getFlag(),
					HTMLFormat.getFlag(), IntegerFormat.getFlag());
		}
		if (HTMLFormat.getFlag()) {
			String title = "<" + StatEngine.header2 + ">" + Header.getString()
					+ "</" + StatEngine.header2 + ">\n";
			showResults(title + data);
		} else {
			showResults(data);
		}
		return 0;
	}
}
