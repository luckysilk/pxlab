/* Generated By:JavaCC: Do not edit this line. ExDesignTreeParserTokenManager.java */
package de.pxlab.pxl.parser;

import java.util.*;
import java.io.*;
import de.pxlab.util.StringExt;
import de.pxlab.pxl.*;

public class ExDesignTreeParserTokenManager implements
		ExDesignTreeParserConstants {
	public java.io.PrintStream debugStream = System.out;

	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private final int jjStopStringLiteralDfa_0(int pos, long active0,
			long active1) {
		switch (pos) {
		case 0:
			if ((active0 & 0x3ffffffe000L) != 0L || (active1 & 0x1cL) != 0L) {
				jjmatchedKind = 49;
				return 33;
			}
			if ((active0 & 0x140L) != 0L || (active1 & 0x100000L) != 0L)
				return 2;
			if ((active0 & 0x400000000000000L) != 0L)
				return 9;
			return -1;
		case 1:
			if ((active0 & 0x100L) != 0L)
				return 0;
			if ((active0 & 0x3ffffffe000L) != 0L || (active1 & 0x1cL) != 0L) {
				if (jjmatchedPos != 1) {
					jjmatchedKind = 49;
					jjmatchedPos = 1;
				}
				return 33;
			}
			return -1;
		case 2:
			if ((active0 & 0x4000000L) != 0L)
				return 33;
			if ((active1 & 0x4L) != 0L) {
				if (jjmatchedPos < 1) {
					jjmatchedKind = 49;
					jjmatchedPos = 1;
				}
				return -1;
			}
			if ((active0 & 0x3fffbffe000L) != 0L || (active1 & 0x18L) != 0L) {
				jjmatchedKind = 49;
				jjmatchedPos = 2;
				return 33;
			}
			return -1;
		case 3:
			if ((active0 & 0x2fffbffe000L) != 0L || (active1 & 0x18L) != 0L) {
				jjmatchedKind = 49;
				jjmatchedPos = 3;
				return 33;
			}
			if ((active0 & 0x10000000000L) != 0L)
				return 33;
			if ((active1 & 0x4L) != 0L) {
				if (jjmatchedPos < 1) {
					jjmatchedKind = 49;
					jjmatchedPos = 1;
				}
				return -1;
			}
			return -1;
		case 4:
			if ((active0 & 0xfff81fe000L) != 0L || (active1 & 0x10L) != 0L) {
				if (jjmatchedPos != 4) {
					jjmatchedKind = 49;
					jjmatchedPos = 4;
				}
				return 33;
			}
			if ((active0 & 0x20003e00000L) != 0L)
				return 33;
			if ((active1 & 0x4L) != 0L) {
				if (jjmatchedPos < 1) {
					jjmatchedKind = 49;
					jjmatchedPos = 1;
				}
				return -1;
			}
			return -1;
		case 5:
			if ((active0 & 0x8000000000L) != 0L)
				return 33;
			if ((active1 & 0x4L) != 0L) {
				if (jjmatchedPos < 1) {
					jjmatchedKind = 49;
					jjmatchedPos = 1;
				}
				return -1;
			}
			if ((active0 & 0x7ffadfe000L) != 0L) {
				jjmatchedKind = 49;
				jjmatchedPos = 5;
				return 33;
			}
			return -1;
		case 6:
			if ((active0 & 0x901c0000L) != 0L)
				return 33;
			if ((active1 & 0x4L) != 0L) {
				if (jjmatchedPos < 1) {
					jjmatchedKind = 49;
					jjmatchedPos = 1;
				}
				return -1;
			}
			if ((active0 & 0x7f6ac3e000L) != 0L) {
				if (jjmatchedPos != 6) {
					jjmatchedKind = 49;
					jjmatchedPos = 6;
				}
				return 33;
			}
			return -1;
		case 7:
			if ((active0 & 0x7f6a9be000L) != 0L) {
				jjmatchedKind = 49;
				jjmatchedPos = 7;
				return 33;
			}
			if ((active0 & 0x400000L) != 0L)
				return 33;
			if ((active1 & 0x4L) != 0L) {
				if (jjmatchedPos < 1) {
					jjmatchedKind = 49;
					jjmatchedPos = 1;
				}
				return -1;
			}
			return -1;
		case 8:
			if ((active0 & 0x6002838000L) != 0L)
				return 33;
			if ((active0 & 0x1f68186000L) != 0L) {
				if (jjmatchedPos != 8) {
					jjmatchedKind = 49;
					jjmatchedPos = 8;
				}
				return 33;
			}
			if ((active1 & 0x4L) != 0L) {
				if (jjmatchedPos < 1) {
					jjmatchedKind = 49;
					jjmatchedPos = 1;
				}
				return -1;
			}
			return -1;
		case 9:
			if ((active0 & 0x8086000L) != 0L)
				return 33;
			if ((active0 & 0x3f60130000L) != 0L) {
				if (jjmatchedPos != 9) {
					jjmatchedKind = 49;
					jjmatchedPos = 9;
				}
				return 33;
			}
			return -1;
		case 10:
			if ((active0 & 0x2f60034000L) != 0L) {
				jjmatchedKind = 49;
				jjmatchedPos = 10;
				return 33;
			}
			if ((active0 & 0x1000100000L) != 0L)
				return 33;
			return -1;
		case 11:
			if ((active0 & 0x2e60024000L) != 0L) {
				jjmatchedKind = 49;
				jjmatchedPos = 11;
				return 33;
			}
			if ((active0 & 0x100010000L) != 0L)
				return 33;
			return -1;
		case 12:
			if ((active0 & 0x20000L) != 0L)
				return 33;
			if ((active0 & 0x2e60004000L) != 0L) {
				jjmatchedKind = 49;
				jjmatchedPos = 12;
				return 33;
			}
			return -1;
		case 13:
			if ((active0 & 0x2000004000L) != 0L)
				return 33;
			if ((active0 & 0xe60000000L) != 0L) {
				jjmatchedKind = 49;
				jjmatchedPos = 13;
				return 33;
			}
			return -1;
		case 14:
			if ((active0 & 0x240000000L) != 0L) {
				jjmatchedKind = 49;
				jjmatchedPos = 14;
				return 33;
			}
			if ((active0 & 0xc20000000L) != 0L)
				return 33;
			return -1;
		case 15:
			if ((active0 & 0x240000000L) != 0L) {
				jjmatchedKind = 49;
				jjmatchedPos = 15;
				return 33;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_0(int pos, long active0, long active1) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1),
				pos + 1);
	}

	private final int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	private final int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 33:
			jjmatchedKind = 87;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
		case 37:
			return jjStopAtPos(0, 85);
		case 38:
			jjmatchedKind = 75;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
		case 40:
			return jjStopAtPos(0, 55);
		case 41:
			return jjStopAtPos(0, 57);
		case 42:
			return jjStopAtPos(0, 83);
		case 43:
			return jjStopAtPos(0, 69);
		case 44:
			return jjStopAtPos(0, 56);
		case 45:
			return jjStopAtPos(0, 70);
		case 46:
			return jjStartNfaWithStates_0(0, 58, 9);
		case 47:
			jjmatchedKind = 84;
			return jjMoveStringLiteralDfa1_0(0x140L, 0x0L);
		case 58:
			return jjStopAtPos(0, 60);
		case 59:
			return jjStopAtPos(0, 54);
		case 60:
			jjmatchedKind = 64;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x14000L);
		case 61:
			jjmatchedKind = 59;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
		case 62:
			jjmatchedKind = 65;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x68000L);
		case 63:
			return jjStopAtPos(0, 61);
		case 65:
			return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
		case 66:
			return jjMoveStringLiteralDfa1_0(0xe00000L, 0x0L);
		case 67:
			return jjMoveStringLiteralDfa1_0(0x6850000000L, 0x0L);
		case 68:
			return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
		case 69:
			return jjMoveStringLiteralDfa1_0(0x6000L, 0x0L);
		case 70:
			return jjMoveStringLiteralDfa1_0(0x1080000000L, 0x0L);
		case 73:
			return jjMoveStringLiteralDfa1_0(0x8200000000L, 0x0L);
		case 80:
			return jjMoveStringLiteralDfa1_0(0x38000L, 0x0L);
		case 82:
			return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
		case 83:
			return jjMoveStringLiteralDfa1_0(0x1c0000L, 0x0L);
		case 84:
			return jjMoveStringLiteralDfa1_0(0x3000000L, 0x0L);
		case 91:
			return jjStopAtPos(0, 62);
		case 93:
			return jjStopAtPos(0, 63);
		case 94:
			return jjStopAtPos(0, 74);
		case 97:
			return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
		case 100:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
		case 102:
			return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
		case 106:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x18L);
		case 110:
			return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
		case 116:
			return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
		case 123:
			return jjStopAtPos(0, 52);
		case 124:
			jjmatchedKind = 73;
			return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
		case 125:
			return jjStopAtPos(0, 53);
		case 126:
			return jjStopAtPos(0, 86);
		default:
			return jjMoveNfa_0(3, 0);
		}
	}

	private final int jjMoveStringLiteralDfa1_0(long active0, long active1) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0, active1);
			return 1;
		}
		switch (curChar) {
		case 38:
			if ((active1 & 0x100L) != 0L)
				return jjStopAtPos(1, 72);
			break;
		case 42:
			if ((active0 & 0x100L) != 0L)
				return jjStartNfaWithStates_0(1, 8, 0);
			break;
		case 47:
			if ((active0 & 0x40L) != 0L)
				return jjStopAtPos(1, 6);
			break;
		case 60:
			if ((active1 & 0x10000L) != 0L)
				return jjStopAtPos(1, 80);
			break;
		case 61:
			if ((active1 & 0x1000L) != 0L)
				return jjStopAtPos(1, 76);
			else if ((active1 & 0x2000L) != 0L)
				return jjStopAtPos(1, 77);
			else if ((active1 & 0x4000L) != 0L)
				return jjStopAtPos(1, 78);
			else if ((active1 & 0x8000L) != 0L)
				return jjStopAtPos(1, 79);
			break;
		case 62:
			if ((active1 & 0x20000L) != 0L) {
				jjmatchedKind = 81;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L);
		case 97:
			return jjMoveStringLiteralDfa2_0(active0, 0x21180000000L, active1,
					0x18L);
		case 100:
			return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
		case 101:
			return jjMoveStringLiteralDfa2_0(active0, 0x4041c0000L, active1,
					0x4L);
		case 108:
			return jjMoveStringLiteralDfa2_0(active0, 0xe00000L, active1, 0L);
		case 109:
			return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1,
					0L);
		case 110:
			return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
		case 111:
			return jjMoveStringLiteralDfa2_0(active0, 0x6850000000L, active1,
					0L);
		case 114:
			return jjMoveStringLiteralDfa2_0(active0, 0x10003038000L, active1,
					0L);
		case 115:
			return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
		case 120:
			return jjMoveStringLiteralDfa2_0(active0, 0x6000L, active1, 0L);
		case 124:
			if ((active1 & 0x80L) != 0L)
				return jjStopAtPos(1, 71);
			break;
		default:
			break;
		}
		return jjStartNfa_0(0, active0, active1);
	}

	private final int jjMoveStringLiteralDfa2_0(long old0, long active0,
			long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(0, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0, active1);
			return 2;
		}
		switch (curChar) {
		case 46:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L);
		case 62:
			if ((active1 & 0x40000L) != 0L)
				return jjStopAtPos(2, 82);
			break;
		case 99:
			return jjMoveStringLiteralDfa3_0(active0, 0x1080000000L, active1,
					0L);
		case 100:
			return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
		case 105:
			return jjMoveStringLiteralDfa3_0(active0, 0x3000000L, active1, 0L);
		case 106:
			return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
		case 108:
			return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1,
					0L);
		case 110:
			return jjMoveStringLiteralDfa3_0(active0, 0x6150000000L, active1,
					0L);
		case 111:
			return jjMoveStringLiteralDfa3_0(active0, 0xe38000L, active1, 0L);
		case 112:
			return jjMoveStringLiteralDfa3_0(active0, 0x8400006000L, active1,
					0L);
		case 115:
			return jjMoveStringLiteralDfa3_0(active0, 0x201c0000L, active1, 0L);
		case 117:
			return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1,
					0L);
		case 118:
			return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1,
					0x18L);
		case 119:
			if ((active0 & 0x4000000L) != 0L)
				return jjStartNfaWithStates_0(2, 26, 33);
			break;
		default:
			break;
		}
		return jjStartNfa_0(1, active0, active1);
	}

	private final int jjMoveStringLiteralDfa3_0(long old0, long active0,
			long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(1, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0, active1);
			return 3;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa4_0(active0, 0x803000000L, active1,
					0x18L);
		case 99:
			return jjMoveStringLiteralDfa4_0(active0, 0xe38000L, active1, 0L);
		case 100:
			return jjMoveStringLiteralDfa4_0(active0, 0x6100000000L, active1,
					0L);
		case 101:
			if ((active0 & 0x10000000000L) != 0L)
				return jjStartNfaWithStates_0(3, 40, 33);
			return jjMoveStringLiteralDfa4_0(active0, 0x600006000L, active1, 0L);
		case 105:
			return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
		case 111:
			return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1,
					0L);
		case 112:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L);
		case 115:
			return jjMoveStringLiteralDfa4_0(active0, 0x200001c0000L, active1,
					0L);
		case 116:
			return jjMoveStringLiteralDfa4_0(active0, 0x10d0000000L, active1,
					0L);
		case 117:
			return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L);
		default:
			break;
		}
		return jjStartNfa_0(2, active0, active1);
	}

	private final int jjMoveStringLiteralDfa4_0(long old0, long active0,
			long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(2, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0, active1);
			return 4;
		}
		switch (curChar) {
		case 46:
			if ((active1 & 0x8L) != 0L)
				return jjStopAtPos(4, 67);
			break;
		case 101:
			if ((active0 & 0x20000000000L) != 0L)
				return jjStartNfaWithStates_0(4, 41, 33);
			return jjMoveStringLiteralDfa5_0(active0, 0x10038000L, active1, 0L);
		case 103:
			return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0L);
		case 105:
			return jjMoveStringLiteralDfa5_0(active0, 0x60401c0000L, active1,
					0L);
		case 107:
			if ((active0 & 0x200000L) != 0L) {
				jjmatchedKind = 21;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0xc00000L, active1, 0L);
		case 108:
			if ((active0 & 0x1000000L) != 0L) {
				jjmatchedKind = 24;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0L);
		case 110:
			return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L);
		case 111:
			return jjMoveStringLiteralDfa5_0(active0, 0x1180000000L, active1,
					0L);
		case 112:
			return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L);
		case 114:
			return jjMoveStringLiteralDfa5_0(active0, 0x8800006000L, active1,
					0L);
		case 115:
			return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L);
		case 120:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x14L);
		default:
			break;
		}
		return jjStartNfa_0(3, active0, active1);
	}

	private final int jjMoveStringLiteralDfa5_0(long old0, long active0,
			long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(3, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0, active1);
			return 5;
		}
		switch (curChar) {
		case 46:
			if ((active1 & 0x10L) != 0L)
				return jjStopAtPos(5, 68);
			break;
		case 68:
			return jjMoveStringLiteralDfa6_0(active0, 0x2800000L, active1, 0L);
		case 69:
			return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0L);
		case 100:
			return jjMoveStringLiteralDfa6_0(active0, 0x400038000L, active1, 0L);
		case 101:
			return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L);
		case 105:
			return jjMoveStringLiteralDfa6_0(active0, 0x800006000L, active1, 0L);
		case 108:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
		case 109:
			return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L);
		case 110:
			return jjMoveStringLiteralDfa6_0(active0, 0x60000000L, active1, 0L);
		case 111:
			return jjMoveStringLiteralDfa6_0(active0, 0x1c0000L, active1, 0L);
		case 114:
			return jjMoveStringLiteralDfa6_0(active0, 0x1080000000L, active1,
					0L);
		case 116:
			if ((active0 & 0x8000000000L) != 0L)
				return jjStartNfaWithStates_0(5, 39, 33);
			return jjMoveStringLiteralDfa6_0(active0, 0x6008000000L, active1,
					0L);
		case 120:
			return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0L);
		default:
			break;
		}
		return jjStartNfa_0(4, active0, active1);
	}

	private final int jjMoveStringLiteralDfa6_0(long old0, long active0,
			long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(4, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0, active1);
			return 6;
		}
		switch (curChar) {
		case 70:
			return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0L);
		case 76:
			return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1,
					0L);
		case 97:
			return jjMoveStringLiteralDfa7_0(active0, 0x80a800000L, active1,
					0x4L);
		case 101:
			return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L);
		case 105:
			return jjMoveStringLiteralDfa7_0(active0, 0x6000000000L, active1,
					0L);
		case 109:
			return jjMoveStringLiteralDfa7_0(active0, 0x20006000L, active1, 0L);
		case 110:
			if ((active0 & 0x40000L) != 0L) {
				jjmatchedKind = 18;
				jjmatchedPos = 6;
			}
			return jjMoveStringLiteralDfa7_0(active0, 0x200580000L, active1, 0L);
		case 115:
			if ((active0 & 0x80000000L) != 0L)
				return jjStartNfaWithStates_0(6, 31, 33);
			break;
		case 116:
			if ((active0 & 0x10000000L) != 0L)
				return jjStartNfaWithStates_0(6, 28, 33);
			break;
		case 117:
			return jjMoveStringLiteralDfa7_0(active0, 0x40038000L, active1, 0L);
		default:
			break;
		}
		return jjStartNfa_0(5, active0, active1);
	}

	private final int jjMoveStringLiteralDfa7_0(long old0, long active0,
			long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(5, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0, active1);
			return 7;
		}
		switch (curChar) {
		case 68:
			return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0L);
		case 69:
			return jjMoveStringLiteralDfa8_0(active0, 0x80000L, active1, 0L);
		case 97:
			return jjMoveStringLiteralDfa8_0(active0, 0x140000000L, active1, 0L);
		case 98:
			return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0x4L);
		case 100:
			if ((active0 & 0x400000L) != 0L)
				return jjStartNfaWithStates_0(7, 22, 33);
			return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0L);
		case 101:
			return jjMoveStringLiteralDfa8_0(active0, 0x1020006000L, active1,
					0L);
		case 110:
			return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0L);
		case 111:
			return jjMoveStringLiteralDfa8_0(active0, 0x6000000000L, active1,
					0L);
		case 114:
			return jjMoveStringLiteralDfa8_0(active0, 0x38000L, active1, 0L);
		case 116:
			return jjMoveStringLiteralDfa8_0(active0, 0x802800000L, active1, 0L);
		default:
			break;
		}
		return jjStartNfa_0(6, active0, active1);
	}

	private final int jjMoveStringLiteralDfa8_0(long old0, long active0,
			long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(6, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, active0, active1);
			return 8;
		}
		switch (curChar) {
		case 46:
			if ((active1 & 0x4L) != 0L)
				return jjStopAtPos(8, 66);
			break;
		case 97:
			if ((active0 & 0x800000L) != 0L)
				return jjStartNfaWithStates_0(8, 23, 33);
			else if ((active0 & 0x2000000L) != 0L)
				return jjStartNfaWithStates_0(8, 25, 33);
			return jjMoveStringLiteralDfa9_0(active0, 0x100000L, active1, 0L);
		case 99:
			return jjMoveStringLiteralDfa9_0(active0, 0x100000000L, active1, 0L);
		case 101:
			if ((active0 & 0x8000L) != 0L) {
				jjmatchedKind = 15;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_0(active0, 0xa00030000L, active1, 0L);
		case 108:
			return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L);
		case 110:
			if ((active0 & 0x4000000000L) != 0L) {
				jjmatchedKind = 38;
				jjmatchedPos = 8;
			}
			return jjMoveStringLiteralDfa9_0(active0, 0x2020086000L, active1,
					0L);
		case 116:
			return jjMoveStringLiteralDfa9_0(active0, 0x440000000L, active1, 0L);
		case 118:
			return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L, active1,
					0L);
		default:
			break;
		}
		return jjStartNfa_0(7, active0, active1);
	}

	private final int jjMoveStringLiteralDfa9_0(long old0, long active0,
			long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(7, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(8, active0, 0L);
			return 9;
		}
		switch (curChar) {
		case 68:
			return jjMoveStringLiteralDfa10_0(active0, 0x20000L);
		case 69:
			return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
		case 70:
			return jjMoveStringLiteralDfa10_0(active0, 0xc00000000L);
		case 84:
			return jjMoveStringLiteralDfa10_0(active0, 0x2000000000L);
		case 100:
			if ((active0 & 0x80000L) != 0L)
				return jjStartNfaWithStates_0(9, 19, 33);
			break;
		case 101:
			if ((active0 & 0x8000000L) != 0L)
				return jjStartNfaWithStates_0(9, 27, 33);
			return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L);
		case 105:
			return jjMoveStringLiteralDfa10_0(active0, 0x40000000L);
		case 110:
			return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
		case 116:
			if ((active0 & 0x2000L) != 0L) {
				jjmatchedKind = 13;
				jjmatchedPos = 9;
			}
			return jjMoveStringLiteralDfa10_0(active0, 0x120104000L);
		default:
			break;
		}
		return jjStartNfa_0(8, active0, 0L);
	}

	private final int jjMoveStringLiteralDfa10_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(8, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(9, active0, 0L);
			return 10;
		}
		switch (curChar) {
		case 68:
			return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
		case 71:
			return jjMoveStringLiteralDfa11_0(active0, 0x20000000L);
		case 97:
			if ((active0 & 0x100000L) != 0L)
				return jjStartNfaWithStates_0(10, 20, 33);
			return jjMoveStringLiteralDfa11_0(active0, 0x2c00020000L);
		case 108:
			if ((active0 & 0x1000000000L) != 0L)
				return jjStartNfaWithStates_0(10, 36, 33);
			break;
		case 110:
			return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
		case 111:
			return jjMoveStringLiteralDfa11_0(active0, 0x140000000L);
		case 116:
			return jjMoveStringLiteralDfa11_0(active0, 0x200000000L);
		default:
			break;
		}
		return jjStartNfa_0(9, active0, 0L);
	}

	private final int jjMoveStringLiteralDfa11_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(9, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(10, active0, 0L);
			return 11;
		}
		switch (curChar) {
		case 70:
			return jjMoveStringLiteralDfa12_0(active0, 0x200000000L);
		case 97:
			return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
		case 98:
			return jjMoveStringLiteralDfa12_0(active0, 0x2000000000L);
		case 99:
			return jjMoveStringLiteralDfa12_0(active0, 0xc00000000L);
		case 100:
			if ((active0 & 0x10000L) != 0L)
				return jjStartNfaWithStates_0(11, 16, 33);
			break;
		case 110:
			return jjMoveStringLiteralDfa12_0(active0, 0x40000000L);
		case 114:
			if ((active0 & 0x100000000L) != 0L)
				return jjStartNfaWithStates_0(11, 32, 33);
			return jjMoveStringLiteralDfa12_0(active0, 0x20000000L);
		case 116:
			return jjMoveStringLiteralDfa12_0(active0, 0x20000L);
		default:
			break;
		}
		return jjStartNfa_0(10, active0, 0L);
	}

	private final int jjMoveStringLiteralDfa12_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(10, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(11, active0, 0L);
			return 12;
		}
		switch (curChar) {
		case 71:
			return jjMoveStringLiteralDfa13_0(active0, 0x40000000L);
		case 97:
			if ((active0 & 0x20000L) != 0L)
				return jjStartNfaWithStates_0(12, 17, 33);
			return jjMoveStringLiteralDfa13_0(active0, 0x200000000L);
		case 108:
			return jjMoveStringLiteralDfa13_0(active0, 0x2000000000L);
		case 111:
			return jjMoveStringLiteralDfa13_0(active0, 0x20000000L);
		case 116:
			return jjMoveStringLiteralDfa13_0(active0, 0xc00004000L);
		default:
			break;
		}
		return jjStartNfa_0(11, active0, 0L);
	}

	private final int jjMoveStringLiteralDfa13_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(11, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(12, active0, 0L);
			return 13;
		}
		switch (curChar) {
		case 97:
			if ((active0 & 0x4000L) != 0L)
				return jjStartNfaWithStates_0(13, 14, 33);
			break;
		case 99:
			return jjMoveStringLiteralDfa14_0(active0, 0x200000000L);
		case 101:
			if ((active0 & 0x2000000000L) != 0L)
				return jjStartNfaWithStates_0(13, 37, 33);
			break;
		case 111:
			return jjMoveStringLiteralDfa14_0(active0, 0xc00000000L);
		case 114:
			return jjMoveStringLiteralDfa14_0(active0, 0x40000000L);
		case 117:
			return jjMoveStringLiteralDfa14_0(active0, 0x20000000L);
		default:
			break;
		}
		return jjStartNfa_0(12, active0, 0L);
	}

	private final int jjMoveStringLiteralDfa14_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(12, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(13, active0, 0L);
			return 14;
		}
		switch (curChar) {
		case 111:
			return jjMoveStringLiteralDfa15_0(active0, 0x40000000L);
		case 112:
			if ((active0 & 0x20000000L) != 0L)
				return jjStartNfaWithStates_0(14, 29, 33);
			break;
		case 114:
			if ((active0 & 0x400000000L) != 0L)
				return jjStartNfaWithStates_0(14, 34, 33);
			else if ((active0 & 0x800000000L) != 0L)
				return jjStartNfaWithStates_0(14, 35, 33);
			break;
		case 116:
			return jjMoveStringLiteralDfa15_0(active0, 0x200000000L);
		default:
			break;
		}
		return jjStartNfa_0(13, active0, 0L);
	}

	private final int jjMoveStringLiteralDfa15_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(13, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(14, active0, 0L);
			return 15;
		}
		switch (curChar) {
		case 111:
			return jjMoveStringLiteralDfa16_0(active0, 0x200000000L);
		case 117:
			return jjMoveStringLiteralDfa16_0(active0, 0x40000000L);
		default:
			break;
		}
		return jjStartNfa_0(14, active0, 0L);
	}

	private final int jjMoveStringLiteralDfa16_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(14, old0, 0L);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(15, active0, 0L);
			return 16;
		}
		switch (curChar) {
		case 112:
			if ((active0 & 0x40000000L) != 0L)
				return jjStartNfaWithStates_0(16, 30, 33);
			break;
		case 114:
			if ((active0 & 0x200000000L) != 0L)
				return jjStartNfaWithStates_0(16, 33, 33);
			break;
		default:
			break;
		}
		return jjStartNfa_0(15, active0, 0L);
	}

	private final void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private final void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private final void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private final void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

	private final void jjCheckNAddStates(int start) {
		jjCheckNAdd(jjnextStates[start]);
		jjCheckNAdd(jjnextStates[start + 1]);
	}
	static final long[] jjbitVec0 = { 0xfffffffffffffffeL, 0xffffffffffffffffL,
			0xffffffffffffffffL, 0xffffffffffffffffL };
	static final long[] jjbitVec2 = { 0x0L, 0x0L, 0xffffffffffffffffL,
			0xffffffffffffffffL };
	static final long[] jjbitVec3 = { 0x1ff00000fffffffeL, 0xffffffffffffc000L,
			0xffffffffL, 0x600000000000000L };
	static final long[] jjbitVec4 = { 0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL };
	static final long[] jjbitVec5 = { 0x0L, 0xffffffffffffffffL,
			0xffffffffffffffffL, 0xffffffffffffffffL };
	static final long[] jjbitVec6 = { 0xffffffffffffffffL, 0xffffffffffffffffL,
			0xffffL, 0x0L };
	static final long[] jjbitVec7 = { 0xffffffffffffffffL, 0xffffffffffffffffL,
			0x0L, 0x0L };
	static final long[] jjbitVec8 = { 0x3fffffffffffL, 0x0L, 0x0L, 0x0L };

	private final int jjMoveNfa_0(int startState, int curPos) {
		int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 50;
		int i = 1;
		jjstateSet[0] = startState;
		int j, kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 3:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 42)
								kind = 42;
							jjCheckNAddStates(0, 8);
						} else if (curChar == 36) {
							if (kind > 49)
								kind = 49;
							jjCheckNAdd(33);
						} else if (curChar == 34)
							jjCheckNAddStates(9, 11);
						else if (curChar == 39)
							jjAddStates(12, 13);
						else if (curChar == 46)
							jjCheckNAdd(9);
						else if (curChar == 47)
							jjstateSet[jjnewStateCnt++] = 2;
						if (curChar == 48)
							jjstateSet[jjnewStateCnt++] = 5;
						break;
					case 0:
						if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 1;
						break;
					case 1:
						if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
							kind = 7;
						break;
					case 2:
						if (curChar == 42)
							jjstateSet[jjnewStateCnt++] = 0;
						break;
					case 4:
						if (curChar == 48)
							jjstateSet[jjnewStateCnt++] = 5;
						break;
					case 6:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 42)
							kind = 42;
						jjCheckNAddTwoStates(6, 7);
						break;
					case 8:
						if (curChar == 46)
							jjCheckNAdd(9);
						break;
					case 9:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 45)
							kind = 45;
						jjCheckNAddStates(14, 16);
						break;
					case 11:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(12);
						break;
					case 12:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 45)
							kind = 45;
						jjCheckNAddTwoStates(12, 13);
						break;
					case 14:
						if (curChar == 39)
							jjAddStates(12, 13);
						break;
					case 15:
						if ((0xffffff7fffffdbffL & l) != 0L)
							jjCheckNAdd(16);
						break;
					case 16:
						if (curChar == 39 && kind > 47)
							kind = 47;
						break;
					case 18:
						if ((0x8400000000L & l) != 0L)
							jjCheckNAdd(16);
						break;
					case 19:
						if ((0xff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(20, 16);
						break;
					case 20:
						if ((0xff000000000000L & l) != 0L)
							jjCheckNAdd(16);
						break;
					case 21:
						if ((0xf000000000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 22;
						break;
					case 22:
						if ((0xff000000000000L & l) != 0L)
							jjCheckNAdd(20);
						break;
					case 23:
						if (curChar == 34)
							jjCheckNAddStates(9, 11);
						break;
					case 24:
						if ((0xfffffffbffffdbffL & l) != 0L)
							jjCheckNAddStates(9, 11);
						break;
					case 26:
						if ((0x8400000000L & l) != 0L)
							jjCheckNAddStates(9, 11);
						break;
					case 27:
						if (curChar == 34 && kind > 48)
							kind = 48;
						break;
					case 28:
						if ((0xff000000000000L & l) != 0L)
							jjCheckNAddStates(17, 20);
						break;
					case 29:
						if ((0xff000000000000L & l) != 0L)
							jjCheckNAddStates(9, 11);
						break;
					case 30:
						if ((0xf000000000000L & l) != 0L)
							jjstateSet[jjnewStateCnt++] = 31;
						break;
					case 31:
						if ((0xff000000000000L & l) != 0L)
							jjCheckNAdd(29);
						break;
					case 32:
						if (curChar != 36)
							break;
						if (kind > 49)
							kind = 49;
						jjCheckNAdd(33);
						break;
					case 33:
						if ((0x3ff001000000000L & l) == 0L)
							break;
						if (kind > 49)
							kind = 49;
						jjCheckNAdd(33);
						break;
					case 34:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 42)
							kind = 42;
						jjCheckNAddStates(0, 8);
						break;
					case 35:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 42)
							kind = 42;
						jjCheckNAddTwoStates(35, 7);
						break;
					case 36:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(36, 37);
						break;
					case 37:
						if (curChar != 46)
							break;
						if (kind > 45)
							kind = 45;
						jjCheckNAddStates(21, 23);
						break;
					case 38:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 45)
							kind = 45;
						jjCheckNAddStates(21, 23);
						break;
					case 40:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(41);
						break;
					case 41:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 45)
							kind = 45;
						jjCheckNAddTwoStates(41, 13);
						break;
					case 42:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(42, 43);
						break;
					case 44:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(45);
						break;
					case 45:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 45)
							kind = 45;
						jjCheckNAddTwoStates(45, 13);
						break;
					case 46:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(24, 26);
						break;
					case 48:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(49);
						break;
					case 49:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(49, 13);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 3:
					case 33:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 49)
							kind = 49;
						jjCheckNAdd(33);
						break;
					case 1:
						if (kind > 7)
							kind = 7;
						break;
					case 5:
						if ((0x100000001000000L & l) != 0L)
							jjCheckNAdd(6);
						break;
					case 6:
						if ((0x7e0000007eL & l) == 0L)
							break;
						if (kind > 42)
							kind = 42;
						jjCheckNAddTwoStates(6, 7);
						break;
					case 7:
						if ((0x100000001000L & l) != 0L && kind > 42)
							kind = 42;
						break;
					case 10:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(27, 28);
						break;
					case 13:
						if ((0x5000000050L & l) != 0L && kind > 45)
							kind = 45;
						break;
					case 15:
						if ((0xffffffffefffffffL & l) != 0L)
							jjCheckNAdd(16);
						break;
					case 17:
						if (curChar == 92)
							jjAddStates(29, 31);
						break;
					case 18:
						if ((0x14404410000000L & l) != 0L)
							jjCheckNAdd(16);
						break;
					case 24:
						if ((0xffffffffefffffffL & l) != 0L)
							jjCheckNAddStates(9, 11);
						break;
					case 25:
						if (curChar == 92)
							jjAddStates(32, 34);
						break;
					case 26:
						if ((0x14404410000000L & l) != 0L)
							jjCheckNAddStates(9, 11);
						break;
					case 39:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(35, 36);
						break;
					case 43:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(37, 38);
						break;
					case 47:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(39, 40);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int hiByte = (int) (curChar >> 8);
				int i1 = hiByte >> 6;
				long l1 = 1L << (hiByte & 077);
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 3:
					case 33:
						if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 49)
							kind = 49;
						jjCheckNAdd(33);
						break;
					case 1:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
							kind = 7;
						break;
					case 15:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjstateSet[jjnewStateCnt++] = 16;
						break;
					case 24:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjAddStates(9, 11);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 50 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	private final int jjMoveStringLiteralDfa0_3() {
		switch (curChar) {
		case 42:
			return jjMoveStringLiteralDfa1_3(0x800L);
		default:
			return 1;
		}
	}

	private final int jjMoveStringLiteralDfa1_3(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return 1;
		}
		switch (curChar) {
		case 47:
			if ((active0 & 0x800L) != 0L)
				return jjStopAtPos(1, 11);
			break;
		default:
			return 2;
		}
		return 2;
	}

	private final int jjMoveStringLiteralDfa0_1() {
		return jjMoveNfa_1(0, 0);
	}

	private final int jjMoveNfa_1(int startState, int curPos) {
		int[] nextStates;
		int startsAt = 0;
		jjnewStateCnt = 3;
		int i = 1;
		jjstateSet[0] = startState;
		int j, kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					case 0:
						if ((0x2400L & l) != 0L) {
							if (kind > 9)
								kind = 9;
						}
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 1;
						break;
					case 1:
						if (curChar == 10 && kind > 9)
							kind = 9;
						break;
					case 2:
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 1;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int hiByte = (int) (curChar >> 8);
				int i1 = hiByte >> 6;
				long l1 = 1L << (hiByte & 077);
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				MatchLoop: do {
					switch (jjstateSet[--i]) {
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	private final int jjMoveStringLiteralDfa0_2() {
		switch (curChar) {
		case 42:
			return jjMoveStringLiteralDfa1_2(0x400L);
		default:
			return 1;
		}
	}

	private final int jjMoveStringLiteralDfa1_2(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return 1;
		}
		switch (curChar) {
		case 47:
			if ((active0 & 0x400L) != 0L)
				return jjStopAtPos(1, 10);
			break;
		default:
			return 2;
		}
		return 2;
	}
	static final int[] jjnextStates = { 35, 7, 36, 37, 42, 43, 46, 47, 13, 24,
			25, 27, 15, 17, 9, 10, 13, 24, 25, 29, 27, 38, 39, 13, 46, 47, 13,
			11, 12, 18, 19, 21, 26, 28, 30, 40, 41, 44, 45, 48, 49, };

	private static final boolean jjCanMove_0(int hiByte, int i1, int i2,
			long l1, long l2) {
		switch (hiByte) {
		case 0:
			return ((jjbitVec2[i2] & l2) != 0L);
		default:
			if ((jjbitVec0[i1] & l1) != 0L)
				return true;
			return false;
		}
	}

	private static final boolean jjCanMove_1(int hiByte, int i1, int i2,
			long l1, long l2) {
		switch (hiByte) {
		case 0:
			return ((jjbitVec4[i2] & l2) != 0L);
		case 48:
			return ((jjbitVec5[i2] & l2) != 0L);
		case 49:
			return ((jjbitVec6[i2] & l2) != 0L);
		case 51:
			return ((jjbitVec7[i2] & l2) != 0L);
		case 61:
			return ((jjbitVec8[i2] & l2) != 0L);
		default:
			if ((jjbitVec3[i1] & l1) != 0L)
				return true;
			return false;
		}
	}
	public static final String[] jjstrLiteralImages = {
			"",
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			null,
			"\105\170\160\145\162\151\155\145\156\164",
			"\105\170\160\145\162\151\155\145\156\164\104\141\164\141",
			"\120\162\157\143\145\144\165\162\145",
			"\120\162\157\143\145\144\165\162\145\105\156\144",
			"\120\162\157\143\145\144\165\162\145\104\141\164\141",
			"\123\145\163\163\151\157\156",
			"\123\145\163\163\151\157\156\105\156\144",
			"\123\145\163\163\151\157\156\104\141\164\141",
			"\102\154\157\143\153",
			"\102\154\157\143\153\105\156\144",
			"\102\154\157\143\153\104\141\164\141",
			"\124\162\151\141\154",
			"\124\162\151\141\154\104\141\164\141",
			"\156\145\167",
			"\141\144\152\165\163\164\141\142\154\145",
			"\103\157\156\164\145\170\164",
			"\101\163\163\151\147\156\155\145\156\164\107\162\157\165\160",
			"\103\157\156\164\151\156\165\141\164\151\157\156\107\162\157\165\160",
			"\106\141\143\164\157\162\163",
			"\122\141\156\144\157\155\106\141\143\164\157\162",
			"\111\156\144\145\160\145\156\144\145\156\164\106\141\143\164\157\162",
			"\104\145\160\145\156\144\145\156\164\106\141\143\164\157\162",
			"\103\157\166\141\162\151\141\164\145\106\141\143\164\157\162",
			"\106\141\143\164\157\162\114\145\166\145\154",
			"\103\157\156\144\151\164\151\157\156\124\141\142\154\145",
			"\103\157\156\144\151\164\151\157\156", "\111\155\160\157\162\164",
			"\164\162\165\145", "\146\141\154\163\145", null, null, null, null,
			null, null, null, null, null, null, "\173", "\175", "\73", "\50",
			"\54", "\51", "\56", "\75", "\72", "\77", "\133", "\135", "\74",
			"\76", "\144\145\56\160\170\154\141\142\56", "\152\141\166\141\56",
			"\152\141\166\141\170\56", "\53", "\55", "\174\174", "\46\46",
			"\174", "\136", "\46", "\75\75", "\41\75", "\74\75", "\76\75",
			"\74\74", "\76\76", "\76\76\76", "\52", "\57", "\45", "\176",
			"\41", };
	public static final String[] lexStateNames = { "DEFAULT",
			"IN_SINGLE_LINE_COMMENT", "IN_FORMAL_COMMENT",
			"IN_MULTI_LINE_COMMENT", };
	public static final int[] jjnewLexState = { -1, -1, -1, -1, -1, -1, 1, 2,
			3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
			-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, };
	static final long[] jjtoToken = { 0xfff3a7ffffffe001L, 0xffffffL, };
	static final long[] jjtoSkip = { 0xe3eL, 0x0L, };
	static final long[] jjtoSpecial = { 0xe00L, 0x0L, };
	static final long[] jjtoMore = { 0x11c0L, 0x0L, };
	protected JavaCharStream input_stream;
	private final int[] jjrounds = new int[50];
	private final int[] jjstateSet = new int[100];
	StringBuffer image;
	int jjimageLen;
	int lengthOfMatch;
	protected char curChar;

	public ExDesignTreeParserTokenManager(JavaCharStream stream) {
		if (JavaCharStream.staticFlag)
			throw new Error(
					"ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		input_stream = stream;
	}

	public ExDesignTreeParserTokenManager(JavaCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	public void ReInit(JavaCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private final void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 50; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	public void ReInit(JavaCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	public void SwitchTo(int lexState) {
		if (lexState >= 4 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : "
					+ lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	protected Token jjFillToken() {
		Token t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		String im = jjstrLiteralImages[jjmatchedKind];
		t.image = (im == null) ? input_stream.GetImage() : im;
		t.beginLine = input_stream.getBeginLine();
		t.beginColumn = input_stream.getBeginColumn();
		t.endLine = input_stream.getEndLine();
		t.endColumn = input_stream.getEndColumn();
		return t;
	}
	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;

	public Token getNextToken() {
		int kind;
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;
		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				matchedToken.specialToken = specialToken;
				return matchedToken;
			}
			image = null;
			jjimageLen = 0;
			for (;;) {
				switch (curLexState) {
				case 0:
					try {
						input_stream.backup(0);
						while (curChar <= 32
								&& (0x100003600L & (1L << curChar)) != 0L)
							curChar = input_stream.BeginToken();
					} catch (java.io.IOException e1) {
						continue EOFLoop;
					}
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_0();
					break;
				case 1:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_1();
					if (jjmatchedPos == 0 && jjmatchedKind > 12) {
						jjmatchedKind = 12;
					}
					break;
				case 2:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_2();
					if (jjmatchedPos == 0 && jjmatchedKind > 12) {
						jjmatchedKind = 12;
					}
					break;
				case 3:
					jjmatchedKind = 0x7fffffff;
					jjmatchedPos = 0;
					curPos = jjMoveStringLiteralDfa0_3();
					if (jjmatchedPos == 0 && jjmatchedKind > 12) {
						jjmatchedKind = 12;
					}
					break;
				}
				if (jjmatchedKind != 0x7fffffff) {
					if (jjmatchedPos + 1 < curPos)
						input_stream.backup(curPos - jjmatchedPos - 1);
					if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						matchedToken = jjFillToken();
						matchedToken.specialToken = specialToken;
						if (jjnewLexState[jjmatchedKind] != -1)
							curLexState = jjnewLexState[jjmatchedKind];
						return matchedToken;
					} else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
							matchedToken = jjFillToken();
							if (specialToken == null)
								specialToken = matchedToken;
							else {
								matchedToken.specialToken = specialToken;
								specialToken = (specialToken.next = matchedToken);
							}
							SkipLexicalActions(matchedToken);
						} else
							SkipLexicalActions(null);
						if (jjnewLexState[jjmatchedKind] != -1)
							curLexState = jjnewLexState[jjmatchedKind];
						continue EOFLoop;
					}
					MoreLexicalActions();
					if (jjnewLexState[jjmatchedKind] != -1)
						curLexState = jjnewLexState[jjmatchedKind];
					curPos = 0;
					jjmatchedKind = 0x7fffffff;
					try {
						curChar = input_stream.readChar();
						continue;
					} catch (java.io.IOException e1) {
					}
				}
				int error_line = input_stream.getEndLine();
				int error_column = input_stream.getEndColumn();
				String error_after = null;
				boolean EOFSeen = false;
				try {
					input_stream.readChar();
					input_stream.backup(1);
				} catch (java.io.IOException e1) {
					EOFSeen = true;
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
					if (curChar == '\n' || curChar == '\r') {
						error_line++;
						error_column = 0;
					} else
						error_column++;
				}
				if (!EOFSeen) {
					input_stream.backup(1);
					error_after = curPos <= 1 ? "" : input_stream.GetImage();
				}
				throw new TokenMgrError(EOFSeen, curLexState, error_line,
						error_column, error_after, curChar,
						TokenMgrError.LEXICAL_ERROR);
			}
		}
	}

	void SkipLexicalActions(Token matchedToken) {
		switch (jjmatchedKind) {
		default:
			break;
		}
	}

	void MoreLexicalActions() {
		jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
		switch (jjmatchedKind) {
		case 7:
			if (image == null)
				image = new StringBuffer();
			image.append(input_stream.GetSuffix(jjimageLen));
			jjimageLen = 0;
			input_stream.backup(1);
			break;
		default:
			break;
		}
	}
}
