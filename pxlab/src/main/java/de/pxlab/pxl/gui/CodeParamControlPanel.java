package de.pxlab.pxl.gui;

import java.awt.*;
import java.awt.event.*;

import de.pxlab.awtx.*;
import de.pxlab.pxl.*;
import de.pxlab.util.*;

/**
 * A parameter control panel for experimental parameters whose value is an
 * integer value which can be selected from a small set of discrete codes or
 * whose value is generated by combining a small set of bit patterns. The codes
 * and bit patterns have to be defined as static integer constants in a class
 * file. In case of bit pattern combinations the single bit constants are
 * identified by having the postfix "_BIT" in their names.
 * 
 * @author H. Irtel
 * @version 0.1.1
 */
/*
 * 07/28/01
 * 
 * 09/08/02 make sure that output values are code value names instead of simple
 * numeric values.
 */
public class CodeParamControlPanel extends SingleParamControlPanel implements
		ItemListener {
	private String[] names;
	private int[] values;
	private int value;
	private boolean single;
	private String className;

	/**
	 * Create a control panel for an experimental parameters whose value is some
	 * integer value which can be selected from a small set of discrete codes or
	 * whose value is generated by combining a small set of binary bit patterns.
	 * 
	 * @param dspp
	 *            this is the Component which shows the Display object and which
	 *            receives the repaint() messages whenver a parameter value
	 *            changes. This CodeParamControlPanel object sends a repaint
	 *            message to this Component whenever the parameter has changed.
	 *            This parameter may be null if no visible Display is to be
	 *            modified.
	 * @param dsp
	 *            the Display object whose parameter is controlled here. This
	 *            parameter may be null if no visible Display is to be modified.
	 * @param exd
	 *            the ExParDescriptor object which describes the ExPar parameter
	 *            to be controlled.
	 * @param cls
	 *            the class which contains the possible values for this code
	 *            parameter as static integer constants. NOte that if the flag
	 *            sng is cleared then only those constants are shown whose name
	 *            starts with "USE_".
	 * @param sng
	 *            if true then only a single value of the given list of possible
	 *            values may be activated. If false then multiple values may be
	 *            activated and will be combined by a binary OR operation to
	 *            form the final value of the parameter. Note that currently all
	 *            implemented codes are of the single selection type.
	 */
	public CodeParamControlPanel(Component dspp, Display dsp,
			ExParDescriptor exd, Class cls, boolean sng) {
		super(dspp, dsp, exd);
		className = cls.getName();
		names = Inspector.getStaticIntegerConstantsOf(cls);
		int n = names.length;
		values = new int[n];
		for (int i = 0; i < n; i++) {
			// System.out.println("CodeParamControlPanel() names[" + i + "] = "
			// + cls.getName() + "." + names[i]);
			values[i] = Inspector.valueOf(cls, names[i]);
		}
		single = sng;
		Panel valuePanel = new Panel(new GridLayout(0, 1));
		if (Debug.layout())
			valuePanel.setBackground(Color.red);
		value = exPar.getInt();
		// System.out.println("CodeParamControlPanel() value = " + value);
		if (single) {
			CheckboxGroup group = new CheckboxGroup();
			for (int i = 0; i < n; i++) {
				if (!names[i].endsWith("_BIT")) {
					Checkbox b = new Checkbox(names[i], value == values[i],
							group);
					b.addItemListener(this);
					valuePanel.add(b);
					// System.out.println(b.getLabel() + " " +
					// b.getPreferredSize());
				}
			}
		} else {
			for (int i = 0; i < n; i++) {
				if (!names[i].endsWith("_BIT")) {
					Checkbox b = new Checkbox(names[i],
							(value & values[i]) != 0);
					b.addItemListener(this);
					valuePanel.add(b);
				}
			}
		}
		add(valuePanel, BorderLayout.CENTER);
	}

	/**
	 * The ActionListener object of this panel's numeric input field.
	 */
	public void itemStateChanged(ItemEvent e) {
		String item = (String) e.getItem();
		int index = StringExt.indexOf(item, names);
		if (single) {
			value = values[index];
			// exParValue.set(value);
			exParValue.set(new ExParValueConstant(className + "."
					+ names[index]));
		} else {
			if (e.getStateChange() == ItemEvent.SELECTED) {
				value = value | values[index];
			} else {
				value = value & ~values[index];
			}
			exParValue.set(value);
		}
		updateDisplay();
	}

	public void updateControl(ExParValue v) {
	}
}
